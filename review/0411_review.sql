SET SERVEROUTPUT ON;
DECLARE
    V_DEPT_ROW DEPT%ROWTYPE;
    
    CURSOR C1(P_DEPTNO DEPT.DEPTNO%TYPE) IS(
        SELECT DEPTNO, DNAME, LOC
        FROM DEPT
        WHERE DEPTNO = P_DEPTNO
    );
BEGIN
    OPEN C1(10);
    LOOP
        FETCH C1 INTO V_DEPT_ROW;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_DEPT_ROW.DNAME);
        DBMS_OUTPUT.PUT_LINE(V_DEPT_ROW.LOC);
    END LOOP;
    CLOSE C1;
    
    OPEN C1(20);
    LOOP
        FETCH C1 INTO V_DEPT_ROW;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_DEPT_ROW.DNAME);
        DBMS_OUTPUT.PUT_LINE(V_DEPT_ROW.LOC);
    END LOOP;
END;
/

DECLARE
    V_DEPTNO DEPT.DEPTNO%TYPE;
    
    CURSOR C1(P_DEPTNO DEPT.DEPTNO%TYPE) IS (
        SELECT DEPTNO, DNAME, LOC
        FROM DEPT
        WHERE DEPTNO = P_DEPTNO
    );
BEGIN
    V_DEPTNO := &INPUT_DEPTNO;
    
    FOR C1_REC IN C1(V_DEPTNO) LOOP
        DBMS_OUTPUT.PUT_LINE(C1_REC.DEPTNO);
        DBMS_OUTPUT.PUT_LINE(C1_REC.DNAME);
        DBMS_OUTPUT.PUT_LINE(C1_REC.LOC);
    END LOOP;
END;
/

DECLARE

BEGIN
    UPDATE DEPT
    SET DNAME = 'DATABASE'
    WHERE DEPTNO = 50;
    
    DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
    IF(SQL%FOUND) THEN
        DBMS_OUTPUT.PUT_LINE('TRUE');
    ELSE DBMS_OUTPUT.PUT_LINE('FALSE');
    END IF;
    
    IF(SQL%ISOPEN) THEN
        DBMS_OUTPUT.PUT_LINE('TRUE');
    ELSE
        DBMS_OUTPUT.PUT_LINE('FALSE');
    END IF;
END;
/

DECLARE
    V_WRONG NUMBER;
BEGIN
    SELECT DNAME INTO V_WRONG
    FROM DEPT
    WHERE DEPTNO = 10;
EXCEPTION
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('ERROR!');
END;
/

DECLARE
    V_WRONG NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE(1);
    
    SELECT DNAME INTO V_WRONG
    FROM DEPT
    WHERE DEPTNO = 10;
    
    DBMS_OUTPUT.PUT_LINE(2);
EXCEPTION
    WHEN VALUE_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('ERROR!');
END;
/

DECLARE
    V_WRONG VARCHAR2(20);
BEGIN
    SELECT DNAME INTO V_WRONG
    FROM DEPT
    WHERE DEPTNO IN (10, 20);
EXCEPTION
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR1');
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('ERROR2');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR3');
END;
/

DECLARE
    V_WRONG VARCHAR2(20);
BEGIN
    SELECT DNAME INTO V_WRONG
    FROM DEPT
    WHERE DEPTNO IN (10, 20);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

DECLARE
    V_EMP EMP%ROWTYPE;
    CURSOR C1 IS (
        SELECT *
        FROM EMP
    );
BEGIN
    OPEN C1;
    LOOP
        FETCH C1 INTO V_EMP;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EMPNO : ' || V_EMP.EMPNO
            || ', ENAME : ' || V_EMP.ENAME
            || ', JOB : ' || V_EMP.JOB
            || ', SAL : ' || V_EMP.SAL
            || ', DEPTNO : ' || V_EMP.DEPTNO);
    END LOOP;
    CLOSE C1;
END;
/

DECLARE
    CURSOR C1 IS (
        SELECT *
        FROM EMP
    );
BEGIN
    FOR C1_REC IN C1 LOOP
        DBMS_OUTPUT.PUT_LINE('EMPNO : ' || c1_rec.empno
            || ', ENAME : ' || c1_rec.ename
            || ', JOB : ' || c1_rec.job
            || ', SAL : ' || c1_rec.sal
            || ', DEPTNO : ' || c1_rec.deptno);
    END LOOP;
END;
/

DECLARE
    V_WRONG DATE;
BEGIN
    SELECT ENAME INTO V_WRONG
    FROM EMP
    WHERE EMPNO = 7369;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(TO_CHAR(SYSDATE, 'YYYY"³â"'));
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE PRO_NOPARAM
IS
    V_EMPNO NUMBER(4) := 7788;
    V_ENAME VARCHAR2(10);
BEGIN
    V_ENAME := 'SCOTT';
    DBMS_OUTPUT.PUT_LINE(V_EMPNO);
    DBMS_OUTPUT.PUT_LINE(V_ENAME);
END;
/

EXECUTE PRO_NOPARAM;

SELECT *
FROM USER_SOURCE
WHERE NAME = 'PRO_NOPARAM';

DROP PROCEDURE PRO_NOPARAM;

CREATE OR REPLACE PROCEDURE PRO_PARAM_IN
(
    PARAM1 IN NUMBER,
    PARAM2 NUMBER,
    PARAM3 NUMBER := 3,
    PARAM4 NUMBER DEFAULT 4
)
IS

BEGIN
    DBMS_OUTPUT.PUT_LINE(PARAM1);
    DBMS_OUTPUT.PUT_LINE(PARAM2);
    DBMS_OUTPUT.PUT_LINE(PARAM3);
    DBMS_OUTPUT.PUT_LINE(PARAM4);
END;
/

EXECUTE PRO_PARAM_IN(param3 => 3, param1 => 1, param2 => 2);

CREATE OR REPLACE PROCEDURE PRO_PARAM_OUT(
    IN_EMPNO IN EMP.EMPNO%TYPE,
    OUT_ENAME OUT EMP.ENAME%TYPE,
    OUT_SAL OUT EMP.SAL%TYPE
)
IS

BEGIN
    SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
    FROM EMP
    WHERE EMPNO = IN_EMPNO;
END;
/

DECLARE
    V_ENAME EMP.ENAME%TYPE;
    V_SAL EMP.SAL%TYPE;
BEGIN
    PRO_PARAM_OUT(7788, V_ENAME, V_SAL);
    DBMS_OUTPUT.PUT_LINE(V_ENAME);
    DBMS_OUTPUT.PUT_LINE(V_SAL);
END;
/

CREATE OR REPLACE PROCEDURE PRO_INOUT
(
    INOUT_NO IN OUT NUMBER
)
IS

BEGIN
    INOUT_NO := INOUT_NO * 2;
END;
/

DECLARE
    NO NUMBER;
BEGIN
    NO := 5;
    PRO_INOUT(NO);
    DBMS_OUTPUT.PUT_LINE(NO);
END;
/

CREATE OR REPLACE PROCEDURE PRO_ERR
IS
    ERR_NO NUMBER;
BEGIN
    ERR_NO = 100;
    DBMS_OUTPUT.PUT_LINE(ERR_NO);
END;
/

SHOW ERRORS;

SHOW ERR PROCEDURE PRO_ERR;

SELECT NAME,
    TYPE,
    LINE,
    TEXT
FROM USER_ERRORS
WHERE NAME = 'PRO_ERR';

CREATE OR REPLACE FUNCTION FUNC_AFTERTAX
(
    SAL IN NUMBER
)
RETURN NUMBER
IS
    TAX NUMBER := 0.05;
BEGIN
    RETURN ROUND(SAL - (SAL * TAX));
END;
/

DECLARE
    AFTER_TAX NUMBER;
BEGIN
    AFTER_TAX := FUNC_AFTERTAX(3000);
    
    DBMS_OUTPUT.PUT_LINE(AFTER_TAX);
END;
/

SELECT  FUNC_AFTERTAX(2000)
FROM dual;

SELECT  EMPNO,
    ENAME,
    SAL,
    FUNC_AFTERTAX(SAL)
FROM EMP;

DROP FUNCTION FUNC_AFTERTAX;

CREATE OR REPLACE PACKAGE PKG_EXAMPLE
IS
    FUNCTION FUNC_AFTERTAX(SAL NUMBER) RETURN NUMBER;

    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE);
    
    PROCEDURE PRO_DEPT(IN_DEPTNO IN DEPT.DEPTNO%TYPE);
END;
/

CREATE OR REPLACE PACKAGE BODY PKG_EXAMPLE
IS
    FUNCTION FUNC_AFTERTAX(SAL NUMBER) RETURN NUMBER
    IS
        TAX NUMBER := 0.05;
    BEGIN
        RETURN (SAL - (SAL * TAX));
    END FUNC_AFTERTAX;
    
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE)
    IS
        OUT_ENAME EMP.ENAME%TYPE;
        OUT_SAL EMP.SAL%TYPE;
    BEGIN
        SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
        FROM EMP
        WHERE EMPNO = IN_EMPNO;
        
        DBMS_OUTPUT.PUT_LINE(OUT_ENAME);
        DBMS_OUTPUT.PUT_LINE(OUT_SAL);
    END PRO_EMP;
    
    PROCEDURE PRO_DEPT(IN_DEPTNO IN DEPT.DEPTNO%TYPE)
    IS
        OUT_DNAME DEPT.DNAME%TYPE;
        OUT_LOC DEPT.LOC%TYPE;
    BEGIN
        SELECT DNAME, LOC INTO OUT_DNAME, OUT_LOC
        FROM DEPT
        WHERE DEPTNO = IN_DEPTNO;
        
        DBMS_OUTPUT.PUT_LINE(OUT_DNAME);
        DBMS_OUTPUT.PUT_LINE(OUT_LOC);
    END PRO_DEPT;
END;
/

DECLARE

BEGIN
    DBMS_OUTPUT.PUT_LINE(PKG_EXAMPLE.FUNC_AFTERTAX(3000));
    PKG_EXAMPLE.PRO_EMP(7788);
    PKG_EXAMPLE.PRO_DEPT(10);
END;
/