CREATE OR REPLACE PACKAGE PKG_OVERLOAD
IS
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE);
    
    PROCEDURE PRO_EMP(IN_ENAME IN EMP.ENAME%TYPE);
END;
/


CREATE OR REPLACE PACKAGE BODY PKG_OVERLOAD
IS
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE)
    IS
        OUT_ENAME EMP.ENAME%TYPE;
        OUT_SAL EMP.SAL%TYPE;
    BEGIN
        SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
        FROM EMP
        WHERE EMPNO = IN_EMPNO;
        
        DBMS_OUTPUT.PUT_LINE(OUT_ENAME);
        DBMS_OUTPUT.PUT_LINE(OUT_SAL);
    END PRO_EMP;
    
    PROCEDURE PRO_EMP(IN_ENAME IN EMP.ENAME%TYPE)
    IS
        OUT_ENAME EMP.ENAME%TYPE;
        OUT_SAL EMP.SAL%TYPE;
    BEGIN
        SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
        FROM EMP
        WHERE ENAME = IN_ENAME;
        
        DBMS_OUTPUT.PUT_LINE(OUT_ENAME);
        DBMS_OUTPUT.PUT_LINE(OUT_SAL);
    END PRO_EMP;
END;
/

SET SERVEROUTPUT ON;
DECLARE

BEGIN
    PKG_OVERLOAD.PRO_EMP(7788);
    PKG_OVERLOAD.PRO_EMP('SCOTT');
END;
/

DROP PACKAGE PKG_OVERLOAD;

CREATE TABLE EMP_TRG
    AS SELECT * FROM EMP;
    
SELECT * FROM EMP_TRG;

CREATE OR REPLACE TRIGGER TRG_EMP_NODML_WEEKEND
BEFORE
INSERT OR UPDATE OR DELETE ON EMP_TRG
DECLARE
BEGIN
    IF TO_CHAR(SYSDATE, 'DY') IN ('토', '일') THEN
        IF INSERTING THEN
            RAISE_APPLICATION_ERROR(-20000, '주말 사원정보 추가 불가');
        ELSIF UPDATING THEN
            RAISE_APPLICATION_ERROR(-20001, '주말 사원정보 수정 불가');
        ELSIF DELETING THEN
            RAISE_APPLICATION_ERROR(-20002, '주말 사원정보 삭제 불가');
        ELSE
            RAISE_APPLICATION_ERROR(-20003, '주말 사원정보 변경 불가');
        END IF;
    END IF;
END;
/

UPDATE EMP_TRG
SET SAL = 3500
WHERE ENAME = 'SCOTT';

CREATE TABLE EMP_TRG_LOG(
    TABLENAME VARCHAR2(30),
    DML_TYPE VARCHAR2(20),
    EMPNO NUMBER(4),
    USER_NAME VARCHAR2(50),
    CHANGE_DATE DATE
);

CREATE OR REPLACE TRIGGER TRG_EMP_LOG
AFTER
INSERT OR UPDATE OR DELETE ON EMP_TRG
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO EMP_TRG_LOG
            VALUES('EMP_TRG', 'INSERT', :NEW.EMPNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO EMP_TRG_LOG
            VALUES('EMP_TRG', 'UPDATE', :OLD.EMPNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO EMP_TRG_LOG
            VALUES('EMP_TRG', 'DELETE', :OLD.EMPNO, SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    END IF;
END;
/

INSERT INTO emp_trg (
    empno,
    ename,
    job,
    mgr,
    hiredate,
    sal,
    comm,
    deptno
) VALUES (
    9999,
    'TestEmp',
    'CLERK',
    7788,
    TO_DATE('2022-03-01', 'YYYY-MM-DD'),
    1200,
    NULL,
    20
);

SELECT * FROM EMP_TRG_LOG;

SELECT TRIGGER_NAME,
    TRIGGER_TYPE,
    TRIGGERING_EVENT,
    TABLE_NAME,
    STATUS
FROM USER_TRIGGERS;

DROP TRIGGER TRG_EMP_NODML_WEEKEND;

CREATE OR REPLACE PROCEDURE PRO_DEPT_IN
(
    INOUT_DEPTNO IN OUT DEPT.DEPTNO%TYPE,
    OUT_DNAME OUT DEPT.DNAME%TYPE,
    OUT_LOC OUT DEPT.LOC%TYPE
)
IS
BEGIN
    SELECT DEPTNO, DNAME, LOC INTO INOUT_DEPTNO, OUT_DNAME, OUT_LOC
    FROM DEPT
    WHERE DEPTNO = INOUT_DEPTNO;
END;
/

DECLARE
    V_DEPTNO DEPT.DEPTNO%TYPE;
    V_DNAME DEPT.DNAME%TYPE;
    V_LOC DEPT.LOC%TYPE;
BEGIN
    V_DEPTNO := 10;
    PRO_DEPT_IN(V_DEPTNO, V_DNAME, V_LOC);
    DBMS_OUTPUT.PUT_LINE(V_DEPTNO);
    DBMS_OUTPUT.PUT_LINE(V_DNAME);
    DBMS_OUTPUT.PUT_LINE(V_LOC);
END;
/

CREATE OR REPLACE FUNCTION FUNC_DATE_KOR
(
    V_DATE DATE
)
RETURN VARCHAR2
IS
BEGIN
    RETURN TO_CHAR(V_DATE, 'YYYY"년"MM"월"DD"일"');
END;
/

SELECT ENAME, FUNC_DATE_KOR(HIREDATE) AS HIREDATE
FROM EMP
WHERE EMPNO = 7369;

CREATE TABLE DEPT_TRG
AS (
    SELECT *
    FROM DEPT
);

CREATE TABLE DEPT_TRG_LOG(
    TABLENAME VARCHAR2(10),
    DML_TYPE VARCHAR2(10),
    DEPTNO NUMBER(2),
    USER_NAME VARCHAR2(30),
    CHANGE_DATE DATE
);

CREATE OR REPLACE TRIGGER TRG_DEPT_LOG
AFTER
INSERT OR UPDATE OR DELETE ON DEPT_TRG
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO DEPT_TRG_LOG
            VALUES('DEPT_TRG', 'INSERT', :NEW.DEPTNO,
                SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO DEPT_TRG_LOG
            VALUES('DEPT_TRG', 'UPDATE', :OLD.DEPTNO,
                SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO DEPT_TRG_LOG
            VALUES('DEPT_TRG', 'DELETE', :OLD.DEPTNO,
                SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    END IF;
END;
/

INSERT INTO DEPT_TRG
    VALUES(99, 'TEST_DNAME', 'SEOUL');
UPDATE DEPT_TRG
SET LOC = 'TEST_LOC'
WHERE DEPTNO = 99;
DELETE FROM DEPT_TRG
WHERE DEPTNO = 99;
SELECT * FROM DEPT_TRG_LOG;

CREATE SEQUENCE T_SEQ
START WITH 1
INCREMENT BY 1
MAXVALUE 30
NOCYCLE;

CREATE TABLE T_SEQ_TEST
(
    NO NUMBER DEFAULT T_SEQ.NEXTVAL PRIMARY KEY,
    NAME VARCHAR2(10)
);

DECLARE

BEGIN
    FOR i IN 1..30 LOOP
        INSERT INTO T_SEQ_TEST(NAME)
            VALUES(DBMS_RANDOM.STRING('A', 10));
    END LOOP;
END;
/

SELECT * FROM T_SEQ_TEST;

CREATE TABLE T_MEMBER
(
    no NUMBER,
    NAME VARCHAR2(10),
    TEL NUMBER,
    JUMIN VARCHAR2(13) INVISIBLE
);

DESC T_MEMBER;

INSERT INTO T_MEMBER
    VALUES(1, 'AAA', 1234567890);
SELECT * FROM T_MEMBER;

ALTER TABLE T_MEMBER
MODIFY JUMIN INVISIBLE;

SELECT TABLE_NAME,
    COLUMN_NAME,
    HIDDEN_COLUMN
FROM USER_TAB_COLS
WHERE TABLE_NAME = 'T_MEMBER';

CREATE TABLE T_IDEN(
    NO NUMBER GENERATED AS IDENTITY,
    NAME VARCHAR2(10)
);

INSERT INTO T_IDEN(NAME)
    VALUES('QQQ');
INSERT INTO T_IDEN(NAME)
    VALUES('WWW');
INSERT INTO T_IDEN(NAME)
    VALUES('EEE');
INSERT INTO T_IDEN(NAME)
    VALUES('RRR');
    
SELECT * FROM T_IDEN;

SELECT LPAD(ENAME, LEVEL*4, '*') ENAME,
    LEVEL
FROM EMP
CONNECT BY PRIOR EMPNO = MGR
START WITH EMPNO = 7839;

SELECT EMPNO,
    ENAME,
    JOB,
    MGR,
    LEVEL,
    LPAD(' ', (LEVEL-1) * 2, ' ') || ENAME AS DEPTH_ENAME,
    SYS_CONNECT_BY_PATH(ENAME, '-') AS ENAME_LIST
FROM EMP
WHERE ENAME <> 'JONES'
START WITH MGR IS NULL
CONNECT BY PRIOR EMPNO = MGR
--    AND ENAME <> 'JONES'
ORDER SIBLINGS BY ENAME
;

SELECT LPAD(NAME || '-' || T2.DNAME || '-' || NVL(T1.POSITION, 'Team-Worker'), LEVEL*27, '*')
FROM EMP2 T1, DEPT2 T2
WHERE T1.DEPTNO = T2.DCODE
CONNECT BY PRIOR EMPNO = PEMPNO
START WITH PEMPNO IS NULL;